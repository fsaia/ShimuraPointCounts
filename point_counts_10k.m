// Code for computing point counts of a Shimura curve X_0^D(N), with D>1 and gcd(D,N) = 1, 
// and its Atkin--Lehner quotients, over finite fields. This is authored by Pietro Mercuri and Claudio Stirpe,
// and based off of similar code for modular curves from Dose--Lido--Mercuri--Stirpe 2023. 

// Convention: Fix a Shimura curve X_0^D(N) with D>1 and gcd(D,N) = 1.
// Order the distinct prime divisors of D*N as {p_1, ... , p_l}, with DN = \prod_{k=1}^{l} (p_k)^{e_k}.
// In all functions below, an input Atkin--Lehner subgroup W = <w_{m_1}, ... , w_{m_r}> generated by r 
// involutions is given as the sequence of sets
//      [ {i_{1,1},...,i_{1,n_1}} , ... , {i_{r,1},...,i_{r,n_r}}]
// so that 
//      m_j = \prod_{k=1}^{n_r} (p_{i_{j,k}})^{e_k}
// for all 1 <= j <= l. 
// The input [{}] corresponds to the curve X_0^D(N), quotienting by the trivial subgroup. 

// Main functions: 
//shiALpoints(q,i,D,N,W: m:=Mmax); gives #X_0^D(N)/W over F_q^i, i<Mmax. This function works well for small values of m, only; 

//shirec(q,D,N,W: m:=Mmax); gives a list of #X_0^D(N)/W over F_q^i for i=1,2,...Mmax, recursively. This function works well even for big values of m.  

//shiALgen(D,N,W); gives the genus of X_0^D(N)/W, 
//e.g. shiALgen(77,3,[{1,2},{3}]) for the genus of X_0^{77}(3)/W with W = <w_{21},w_{11}>. 

//shiAL(q,D,N,W); print genus and the number of points over F_q^i for 1=1,2,..,7 

//shiALL(q,D,N); gives genus and number of points of all possible AL quotient (up to five primes dividing D*N)

load "traces10k.m";


shiAL:=function(q,D,N,prova: m:=7) 
quozienti:=[];
quozienti[1]:=prova;
maxq:=100;




limite:=5000;
//limite:=10000;

mmaxq:=20;
qu:=q;
//m:=7;


K<x>:=PolynomialRing(ComplexField());


minl0:=D*N;//X_0


minl3:=1;//X_ns

lev0:=minl0;
lev3:=minl3;

while GCD(lev3,lev0) gt 1 do 
lev3:=lev3+1;
end while;


l0:=lev0;
l3:=lev3;

livello:=l0*(l3)^2;
if livello le limite then 
    while GCD(qu,livello) gt 1 do
    qu:=NextPrime(qu);
    end while;

DIVILEV:=Divisors(lev0*lev3);
diviLEV:=#DIVILEV;
priLEV:=PrimeDivisors(lev0*lev3);
valLEV:=#priLEV;
VLEV:=[]; //valutazione primi del livello

    for i in [1..valLEV] do
    p:=priLEV[i];
    j:=0;
    b:=0;
        while b eq 0 do //
        j:=j+1;
        a,b:=Quotrem(lev0*lev3,p^j);
        end while; //    
    VLEV[i]:=j-1;
    end for;//i 


DIVILEV0:=DIVILEV;
diviLEV0:=#DIVILEV;
priLEV0:=priLEV;
valLEV0:=#priLEV0;
VLEV0:=VLEV; //valutazione primi di l0




DIVILEV3:=Divisors(lev3);
diviLEV3:=#DIVILEV3;
priLEV3:=PrimeDivisors(lev3);
valLEV3:=#priLEV3;
VLEV3:=[]; //valutazione primi di l3

    for i in [1..valLEV3] do
    p:=priLEV3[i];
    j:=0;
    b:=0;
        while b eq 0 do //
        j:=j+1;
        a,b:=Quotrem(lev3,p^j);
        end while; //    
    VLEV3[i]:=j-1;
    end for;//i 


//FINE INIZIALIZZAZIONE


ins_scart:={};
    if valLEV lt 5 then
    for i in [1..5-valLEV] do
    b:=valLEV +i;
    ins_scart:=ins_scart join {b};
    end for;
    end if;


//


//UN ESEMPIO CON UN INSIEME DI GENERATORI DATO ALL'INIZIO:
//quozienti:=prova;   

// FINE CALCOLO GENERATORI


DIVI:=Divisors(livello);
divi:=#DIVI;
pri:=PrimeDivisors(livello);
val:=#pri;

V1:=[]; //valutazione primi di l0 nell'ordine di lev0*lev3
V2:=[];
    for i in [1..val] do
    p:=pri[i];
    j:=0;
    b:=0;
        while b eq 0 do // 9 b
        j:=j+1;
        a,b:=Quotrem(l0,p^j);
        end while;  // 9 b
    V1[i]:=j-1;
    end for;

    for i in [1..val] do
    p:=pri[i];
    j:=0;
    b:=0;
        while b eq 0 do // 9 b
        j:=j+1;
        a,b:=Quotrem(l3,p^j);
        end while;  // 9 b
    V2[i]:=j-1;
    end for;


     p3:=2;
     k3:=0;
    for j in [1..25] do //E' NECESSARIO CHE qu<100!!!
        if p3 eq qu then
        k3:=j;
        end if;
        p3:=NextPrime(p3);
    end for; //j

for generatori in quozienti do 
wm:=[];
for primi in generatori do
molt:=1;
    for p in primi do
    molt:=priLEV[p]*molt;
    end for;
Append(~wm,molt);
end for;

        g:=0;
        ab:=[];

for d0:=1 to diviLEV do // V
for d3:=1 to diviLEV3 do // VII
//

n0:=DIVILEV[d0];

if IsDivisibleBy(n0,D) then

n31:=DIVILEV3[d3];
n3:=n31^2;
n:=n0*n3;
//printf"\n     d0=%o, d3=%o\n",n0,n3;

divin:=NumberOfDivisors(n);
DIVIn:=Divisors(n);
prin:=PrimeDivisors(n);
valn:=#prin;

divin0:=NumberOfDivisors(n0);
DIVIn0:=Divisors(n0);
prin0:=PrimeDivisors(n0);
valn0:=#prin0;

divin3:=NumberOfDivisors(n3);
DIVIn3:=Divisors(n3);
prin3:=PrimeDivisors(n3);
valn3:=#prin3;


PAR:=[];
W:=[]; //valutazione primi di n
        for i in [1..valLEV] do //CALCOLO W e PAR
        p:=priLEV[i];   
        j:=0;
        b:=0;
            while b eq 0 do // 13 b
            j:=j+1;
            a,b:=Quotrem(n,p^j);
            end while;  // 13 b
        W[i]:=j-1;
    if IsDivisibleBy(lev3,p) then
        W[i]:=Floor((j-1)/2);
    end if;
        a,b:=Quotrem(VLEV[i]-W[i],2);
        PAR[i]:=b;
        end for; //i

PAR0:=[];
W0:=[]; //valutazione primi di n0
        for i in [1..valLEV0] do //CALCOLO W e PAR
        p:=priLEV0[i];   
        j:=0;
        b:=0;
            while b eq 0 do // 13 b
            j:=j+1;
            a,b:=Quotrem(n0,p^j);
            end while;  // 13 b
        W0[i]:=j-1;
        a,b:=Quotrem(VLEV0[i]-W0[i],2);
        PAR0[i]:=b;
        end for; //i

PAR3:=[];
W3:=[]; //valutazione primi di ns
        for i in [1..valLEV3] do //CALCOLO W e PAR
        p:=priLEV3[i];
        j:=0;
        b:=0;
            while b eq 0 do // 14 b
            j:=j+1;
            a,b:=Quotrem(n3,p^j);
            end while;  // 14 b
        W3[i]:=Floor((j-1)/2);
        a,b:=Quotrem(VLEV3[i]-W3[i],2);
        PAR3[i]:=b;
        end for; //i

dim1:=#dataByLevel[n];


        nozeri:={};
    for J in generatori do // trovo i non zeri
    nozeri:=nozeri join J;
    end for;
zeri:={};
    for i in [1..valLEV] do
        if not i in nozeri then
        zeri:=zeri join {i};
        end if;
    end for; //i

//printf"zeri2";zeri2;


//printf "A0 n0=%o, zeri=%o, nozeri=%o\n",n0,zeri,nozeri;


              for cont:=1 to dim1 do // X

                Hf:=1;
                Hf1:=1;
                Hf2:=1;

            Hf00:=[];
            Hf0p:=[];
        Hf0m:=[];
        autoVal:=[];

    for i in [1..valLEV] do //calcolo Hf0's
        dif:=VLEV[i];
                p1:=priLEV[i];
        k1:=0;
            for j in [1..valn] do // k1<valn1
                    p2:=prin[j];
            if p2 eq p1 then k1:=j;
            end if;
            end for; //j
if k1 eq 0 then // p>2 se n=15
    autoV:=1;//arbitrario?????????????????????????
    autoVal[i]:=autoV;  
end if;
if IsDivisibleBy(lev0,p1) then
if k1 ne 0 then 
    autoV:=dataByLevel[n,cont,6][k1];
    autoVal[i]:=autoV;
    dif:=dif-W[i];
end if; //k1
    //printf"\n n0=%o, dim1=%o, cont=%o,autoV=%o,k1=%o ",n0,dim1,cont,autoV1,k1;
    parte2:=Floor( (1+(-1)^dif)/2);
    zp:=Floor( (dif+1+parte2*autoV)/2);   //  non Ã¨ mai dispari!
    Append(~Hf00,dif+1);
    Append(~Hf0p,zp);
    Append(~Hf0m,dif+1-zp);
end if;

end for; //i in [1..valLEV]
//printf "\n Hfp=%o\n", Hf3p;
    H1:=1;
    for t in zeri do 
    p1:=priLEV[t];
    if IsDivisibleBy(lev0,p1) then
    H1:=H1*Hf00[t];
    end if;
//if n in selezione then printf "\n p=%o, Hf00[%o]=%o\n", priLEV[t],t,Hf00[t]; end if;
    end for;

//CALCOLO Hf
//printf "\n A1 H1=%o\n", H1;

    sum:=0;

    vettore:=Subsets(nozeri);//nozeri???

    for u in vettore do //sottoinsiemi di J con numero pari di intersezioni
    check:=1;
    for J in generatori do //II rip
    if not IsEven(#(J meet u)) then
    check:=0;
    end if;
    end for;//J

    if check eq 0 then
    Exclude(~vettore,u);
    end if;

    end for;//u

  for u in vettore do
//if n in selezione then printf "A2 u=%o\n",u; end if;

    H:=H1;
        for t in nozeri do //calcolo m_f
    p1:=priLEV[t];

    if IsEven(#PrimeDivisors(GreatestCommonDivisor(p1,D)) ) then //??????????????????????????????????????
    segno:=1;
    else 
    segno:=-1;
    end if;


        if t in u then
if segno eq 1 then
        H:=H*Hf0m[t];
else
        H:=H*Hf0p[t];
end if;
//if n in selezione then printf "\n 3 t in u H=H*%o\n", Hf0m[t]; end if;
        else
if segno eq 1 then
        H:=H*Hf0p[t];
else
        H:=H*Hf0m[t];
end if;
//if n in selezione then printf "\n 3 t not in u H=H*%o\n", Hf0p[t]; end if;
        end if;//t in u opp um
        end for;//t in nozeri
// if n in selezione then printf "\n 3 H=%o\n", H; end if;
        sum:=sum+H; //invarianti rispetto a J
//if n in selezione then printf "4 u=%o, sum=%o\n", u,sum; end if;
    end for;//u
Hf:=sum*Hf; //invarianti rispetto a tutte le J
//if n in selezione then printf "4.5 Hf=%o, sum=%o\n",Hf,sum; end if;


//CONTROLLO 0 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
//printf "5 Hf0m=%o, Hf0p=%o, Hf00=%o, Hf1=%o, autoV=%o\n",Hf0m,Hf0p,Hf00,Hf1,autov;


     w:=dataByLevel[n,cont,3];

//CONTROLLO n.1 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
//printf "\n                      n=%o, Hf1=%o, w=%o \\",n,Hf1,w;

//if n in selezione then
//if Hf gt 0 then printf"6 n=%o, cont=%o, Hf=%o, w=%o, sum=%o,\n Hf00=%o, Hf0p=%o, Hf0m=%o, autoVal=%o\n", n, cont, Hf, w, sum, Hf00, Hf0p, Hf0m, autoVal; end if;
//end if;



    for cont2 in [1..Hf] do //XI *Hf0*Hf1*Hf2*1???????
        for c in [1..w] do //XII

        x1:=dataByLevel[n,cont,7,c][k3];
        Append(~ab,x1);
    g:=g+1;//AJ
          end for;// XII c

//CONTROLLO n.2 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
//printf "7 l0=%o & g=%o , sum=%o, ab=%o \n ",l0,g,sum, ab[g];
    end for; // XI cont2;


                end for; // X cont
end if; //D|n0
end for;// VII d3
end for;// V d0


//printf "\n X(%o, %o, %o)& g=%o\\",l0,l1,l2,g;
//ab;
t:=[];

for i:=1 to #ab do
d:=Roots(x^2+qu-ab[i]*x,ComplexField());
Append(~t,d[1][1]);
Append(~t,d[2][1]);
end for; //i

v:=[];

 for k:=1 to m do        
 e:=0;
     for i:=1 to 1*#ab do
     e:=e+t[2*i]^k+t[2*i-1]^k;
     end for; //i

 Append(~v,qu^k+1-Floor(Real(e+0.1)));
 end for; //k


//printf "\n X_0^%o (%o)/W(%o) g=%o",D,N, wm,g;



//  printf "\n %o & %o & %o & %o & %o & %o & %o & %o \\\\ \n", qu,  v[1], v[2], v[3], v[4], v[5], v[6], v[7];

//
end for;// II generatori
end if;//livello

return g,v,t;

end function; //shiAL


shirec:=function(qu,D,N,prova: m:=70, limite:=5000)

//inizializzazione primi 2g valori
g,v,t:=shiAL(qu,D,N,prova:m:=m);
rec:=[];
m0:=2*g;
if m0 ge m then
return v,g;
end if;

K<x>:=PolynomialRing(ComplexField());

polcompl:=1;
for alpha in t do
polcompl:=polcompl*(x-alpha);
end for;
//polcompl;
coeff:=[];
if polcompl ne 1 then
for k in [1..2*g+1] do
c:=Coefficient(polcompl,k-1);
coeff[k]:=Floor((c+ComplexConjugate(c))/2+0.1);
end for;
else 
coeff[1]:=1;
end if;


for j in [1..m0] do
rec[j]:=v[j]-1-qu^j;
end for;//j

//default m:=70;
for j in [1..m-m0] do
e:=0;
for k in [1..m0] do
e:=e-coeff[k]*rec[j+k-1];
end for;

//coeff;rec;e;

rec[m0+j]:=e;
end for;//j

for j in [1..m] do
rec[j]:=rec[j]+1+qu^j;
end for;//j

return rec,g;
end function; //shirec




shiALL:=function(q,D,N) 

maxq:=100;

coppie5:=
[
    [
        { 4 },
        { 2, 3 }
    ],
    [
        { 4 },
        { 1 }
    ],
    [
        { 2 },
        { 3 }
    ],
    [
        { 1 },
        { 2 }
    ],
    [
        { 3 },
        { 1, 2 }
    ],
    [
        { 1 },
        { 2, 3, 4 }
    ],
    [
        { 2 },
        { 3, 4 }
    ],
    [
        { 1 },
        { 2, 3 }
    ],
    [
        { 3 },
        { 1, 4 }
    ],
    [
        { 2, 4 },
        { 2, 3 }
    ],
    [
        { 1 },
        { 3 }
    ],
    [
        { 1, 3 },
        { 2, 3 }
    ],
    [
        { 1, 3 },
        { 2, 3, 4 }
    ],
    [
        { 3, 4 },
        { 1, 2, 3 }
    ],
    [
        { 1 },
        { 2, 4 }
    ],
    [
        { 4 },
        { 1, 2 }
    ],
    [
        { 1 },
        { 3, 4 }
    ],
    [
        { 2 },
        { 1, 4 }
    ],
    [
        { 3 },
        { 2, 4 }
    ],
    [
        { 2, 3 },
        { 1, 4 }
    ],
    [
        { 1, 2 },
        { 1, 3, 4 }
    ],
    [
        { 2 },
        { 1, 3 }
    ],
    [
        { 2, 3 },
        { 1, 2, 4 }
    ],
    [
        { 1, 3 },
        { 2, 4 }
    ],
    [
        { 4 },
        { 3 }
    ],
    [
        { 2, 4 },
        { 1, 2, 3 }
    ],
    [
        { 3 },
        { 1, 2, 4 }
    ],
    [
        { 1, 3 },
        { 1, 4 }
    ],
    [
        { 1, 2 },
        { 3, 4 }
    ],
    [
        { 2 },
        { 1, 3, 4 }
    ],
    [
        { 4 },
        { 1, 2, 3 }
    ],
    [
        { 2 },
        { 4 }
    ],
    [
        { 4 },
        { 1, 3 }
    ],
    [
        { 1, 4 },
        { 2, 4 }
    ],
    [
        { 1, 4 },
        { 2, 3, 4 }
    ],
    [
        { 2, 3 },
        { 4, 5 }
    ],
    [
        { 4 },
        { 2, 3, 5 }
    ],
    [
        { 2, 3, 5 },
        { 4, 5 }
    ],
    [
        { 1 },
        { 4, 5 }
    ],
    [
        { 4 },
        { 1, 5 }
    ],
    [
        { 1, 5 },
        { 4, 5 }
    ],
    [
        { 3 },
        { 2, 5 }
    ],
    [
        { 2 },
        { 3, 5 }
    ],
    [
        { 3, 5 },
        { 2, 5 }
    ],
    [
        { 2 },
        { 1, 5 }
    ],
    [
        { 1 },
        { 2, 5 }
    ],
    [
        { 2, 5 },
        { 1, 5 }
    ],
    [
        { 1, 2 },
        { 3, 5 }
    ],
    [
        { 3 },
        { 1, 2, 5 }
    ],
    [
        { 1, 2, 5 },
        { 3, 5 }
    ],
    [
        { 2, 3, 4 },
        { 1, 5 }
    ],
    [
        { 1 },
        { 2, 3, 4, 5 }
    ],
    [
        { 2, 3, 4, 5 },
        { 1, 5 }
    ],
    [
        { 3, 4 },
        { 2, 5 }
    ],
    [
        { 2 },
        { 3, 4, 5 }
    ],
    [
        { 3, 4, 5 },
        { 2, 5 }
    ],
    [
        { 2, 3 },
        { 1, 5 }
    ],
    [
        { 1 },
        { 2, 3, 5 }
    ],
    [
        { 2, 3, 5 },
        { 1, 5 }
    ],
    [
        { 1, 4 },
        { 3, 5 }
    ],
    [
        { 3 },
        { 1, 4, 5 }
    ],
    [
        { 1, 4, 5 },
        { 3, 5 }
    ],
    [
        { 2, 3 },
        { 2, 4, 5 }
    ],
    [
        { 2, 4 },
        { 2, 3, 5 }
    ],
    [
        { 2, 3, 5 },
        { 2, 4, 5 }
    ],
    [
        { 3 },
        { 1, 5 }
    ],
    [
        { 1 },
        { 3, 5 }
    ],
    [
        { 3, 5 },
        { 1, 5 }
    ],
    [
        { 2, 3 },
        { 1, 3, 5 }
    ],
    [
        { 1, 3 },
        { 2, 3, 5 }
    ],
    [
        { 2, 3, 5 },
        { 1, 3, 5 }
    ],
    [
        { 2, 3, 4 },
        { 1, 3, 5 }
    ],
    [
        { 1, 3 },
        { 2, 3, 4, 5 }
    ],
    [
        { 2, 3, 4, 5 },
        { 1, 3, 5 }
    ],
    [
        { 1, 2, 3 },
        { 3, 4, 5 }
    ],
    [
        { 3, 4 },
        { 1, 2, 3, 5 }
    ],
    [
        { 1, 2, 3, 5 },
        { 3, 4, 5 }
    ],
    [
        { 2, 4 },
        { 1, 5 }
    ],
    [
        { 1 },
        { 2, 4, 5 }
    ],
    [
        { 2, 4, 5 },
        { 1, 5 }
    ],
    [
        { 1, 2 },
        { 4, 5 }
    ],
    [
        { 4 },
        { 1, 2, 5 }
    ],
    [
        { 1, 2, 5 },
        { 4, 5 }
    ],
    [
        { 3, 4 },
        { 1, 5 }
    ],
    [
        { 1 },
        { 3, 4, 5 }
    ],
    [
        { 3, 4, 5 },
        { 1, 5 }
    ],
    [
        { 1, 4 },
        { 2, 5 }
    ],
    [
        { 2 },
        { 1, 4, 5 }
    ],
    [
        { 1, 4, 5 },
        { 2, 5 }
    ],
    [
        { 2, 4 },
        { 3, 5 }
    ],
    [
        { 3 },
        { 2, 4, 5 }
    ],
    [
        { 2, 4, 5 },
        { 3, 5 }
    ],
    [
        { 1, 4 },
        { 2, 3, 5 }
    ],
    [
        { 2, 3 },
        { 1, 4, 5 }
    ],
    [
        { 1, 4, 5 },
        { 2, 3, 5 }
    ],
    [
        { 1, 3, 4 },
        { 1, 2, 5 }
    ],
    [
        { 1, 2 },
        { 1, 3, 4, 5 }
    ],
    [
        { 1, 3, 4, 5 },
        { 1, 2, 5 }
    ],
    [
        { 1, 3 },
        { 2, 5 }
    ],
    [
        { 2 },
        { 1, 3, 5 }
    ],
    [
        { 1, 3, 5 },
        { 2, 5 }
    ],
    [
        { 1, 2, 4 },
        { 2, 3, 5 }
    ],
    [
        { 2, 3 },
        { 1, 2, 4, 5 }
    ],
    [
        { 1, 2, 4, 5 },
        { 2, 3, 5 }
    ],
    [
        { 2, 4 },
        { 1, 3, 5 }
    ],
    [
        { 1, 3 },
        { 2, 4, 5 }
    ],
    [
        { 2, 4, 5 },
        { 1, 3, 5 }
    ],
    [
        { 3 },
        { 4, 5 }
    ],
    [
        { 4 },
        { 3, 5 }
    ],
    [
        { 3, 5 },
        { 4, 5 }
    ],
    [
        { 1, 2, 3 },
        { 2, 4, 5 }
    ],
    [
        { 2, 4 },
        { 1, 2, 3, 5 }
    ],
    [
        { 1, 2, 3, 5 },
        { 2, 4, 5 }
    ],
    [
        { 1, 2, 4 },
        { 3, 5 }
    ],
    [
        { 3 },
        { 1, 2, 4, 5 }
    ],
    [
        { 1, 2, 4, 5 },
        { 3, 5 }
    ],
    [
        { 1, 4 },
        { 1, 3, 5 }
    ],
    [
        { 1, 3 },
        { 1, 4, 5 }
    ],
    [
        { 1, 4, 5 },
        { 1, 3, 5 }
    ],
    [
        { 3, 4 },
        { 1, 2, 5 }
    ],
    [
        { 1, 2 },
        { 3, 4, 5 }
    ],
    [
        { 3, 4, 5 },
        { 1, 2, 5 }
    ],
    [
        { 1, 3, 4 },
        { 2, 5 }
    ],
    [
        { 2 },
        { 1, 3, 4, 5 }
    ],
    [
        { 1, 3, 4, 5 },
        { 2, 5 }
    ],
    [
        { 1, 2, 3 },
        { 4, 5 }
    ],
    [
        { 4 },
        { 1, 2, 3, 5 }
    ],
    [
        { 1, 2, 3, 5 },
        { 4, 5 }
    ],
    [
        { 4 },
        { 2, 5 }
    ],
    [
        { 2 },
        { 4, 5 }
    ],
    [
        { 4, 5 },
        { 2, 5 }
    ],
    [
        { 1, 3 },
        { 4, 5 }
    ],
    [
        { 4 },
        { 1, 3, 5 }
    ],
    [
        { 1, 3, 5 },
        { 4, 5 }
    ],
    [
        { 2, 4 },
        { 1, 4, 5 }
    ],
    [
        { 1, 4 },
        { 2, 4, 5 }
    ],
    [
        { 2, 4, 5 },
        { 1, 4, 5 }
    ],
    [
        { 2, 3, 4 },
        { 1, 4, 5 }
    ],
    [
        { 1, 4 },
        { 2, 3, 4, 5 }
    ],
    [
        { 2, 3, 4, 5 },
        { 1, 4, 5 }
    ],
    [
        { 4 },
        { 5 }
    ],
    [
        { 2, 3, 4 },
        { 5 }
    ],
    [
        { 2, 3 },
        { 5 }
    ],
    [
        { 3, 4 },
        { 5 }
    ],
    [
        { 1, 3 },
        { 5 }
    ],
    [
        { 3 },
        { 5 }
    ],
    [
        { 1 },
        { 5 }
    ],
    [
        { 1, 2, 3, 4 },
        { 5 }
    ],
    [
        { 1, 4 },
        { 5 }
    ],
    [
        { 1, 2, 3 },
        { 5 }
    ],
    [
        { 2 },
        { 5 }
    ],
    [
        { 1, 2 },
        { 5 }
    ],
    [
        { 1, 2, 4 },
        { 5 }
    ],
    [
        { 2, 4 },
        { 5 }
    ],
    [
        { 1, 3, 4 },
        { 5 }
    ]
];



triple5:=[
    [
        { 3 },
        { 2, 4 },
        { 1, 2 }
    ],
    [
        { 2 },
        { 4 },
        { 1, 3 }
    ],
    [
        { 1 },
        { 3 },
        { 4 }
    ],
    [
        { 3 },
        { 4 },
        { 1, 2 }
    ],
    [
        { 2 },
        { 1 },
        { 4 }
    ],
    [
        { 1, 3 },
        { 2, 4 },
        { 3, 4 }
    ],
    [
        { 2 },
        { 3 },
        { 1, 4 }
    ],
    [
        { 4 },
        { 1, 3 },
        { 2, 3 }
    ],
    [
        { 2 },
        { 1, 3 },
        { 3, 4 }
    ],
    [
        { 1 },
        { 3 },
        { 2 }
    ],
    [
        { 1 },
        { 2, 3 },
        { 3, 4 }
    ],
    [
        { 1 },
        { 2 },
        { 3, 4 }
    ],
    [
        { 2 },
        { 4 },
        { 3 }
    ],
    [
        { 1 },
        { 4 },
        { 2, 3 }
    ],
    [
        { 1 },
        { 3 },
        { 2, 4 }
    ],
    [
        { 4 },
        { 2, 3 },
        { 5 }
    ],
    [
        { 4 },
        { 1 },
        { 5 }
    ],
    [
        { 2 },
        { 3 },
        { 5 }
    ],
    [
        { 1 },
        { 2 },
        { 5 }
    ],
    [
        { 3 },
        { 1, 2 },
        { 5 }
    ],
    [
        { 1 },
        { 2, 3, 4 },
        { 5 }
    ],
    [
        { 2 },
        { 3, 4 },
        { 5 }
    ],
    [
        { 1 },
        { 2, 3 },
        { 5 }
    ],
    [
        { 3 },
        { 1, 4 },
        { 5 }
    ],
    [
        { 2, 4 },
        { 2, 3 },
        { 5 }
    ],
    [
        { 1 },
        { 3 },
        { 5 }
    ],
    [
        { 1, 3 },
        { 2, 3 },
        { 5 }
    ],
    [
        { 1, 3 },
        { 2, 3, 4 },
        { 5 }
    ],
    [
        { 3, 4 },
        { 1, 2, 3 },
        { 5 }
    ],
    [
        { 1 },
        { 2, 4 },
        { 5 }
    ],
    [
        { 4 },
        { 1, 2 },
        { 5 }
    ],
    [
        { 1 },
        { 3, 4 },
        { 5 }
    ],
    [
        { 2 },
        { 1, 4 },
        { 5 }
    ],
    [
        { 3 },
        { 2, 4 },
        { 5 }
    ],
    [
        { 2, 3 },
        { 1, 4 },
        { 5 }
    ],
    [
        { 1, 2 },
        { 1, 3, 4 },
        { 5 }
    ],
    [
        { 2 },
        { 1, 3 },
        { 5 }
    ],
    [
        { 2, 3 },
        { 1, 2, 4 },
        { 5 }
    ],
    [
        { 1, 3 },
        { 2, 4 },
        { 5 }
    ],
    [
        { 4 },
        { 3 },
        { 5 }
    ],
    [
        { 2, 4 },
        { 1, 2, 3 },
        { 5 }
    ],
    [
        { 3 },
        { 1, 2, 4 },
        { 5 }
    ],
    [
        { 1, 3 },
        { 1, 4 },
        { 5 }
    ],
    [
        { 1, 2 },
        { 3, 4 },
        { 5 }
    ],
    [
        { 2 },
        { 1, 3, 4 },
        { 5 }
    ],
    [
        { 4 },
        { 1, 2, 3 },
        { 5 }
    ],
    [
        { 2 },
        { 4 },
        { 5 }
    ],
    [
        { 4 },
        { 1, 3 },
        { 5 }
    ],
    [
        { 1, 4 },
        { 2, 4 },
        { 5 }
    ],
    [
        { 1, 4 },
        { 2, 3, 4 },
        { 5 }
    ],
    [
        { 2, 4 },
        { 1, 2 },
        { 3, 5 }
    ],
    [
        { 3 },
        { 1, 2 },
        { 2, 4, 5 }
    ],
    [
        { 3 },
        { 2, 4 },
        { 1, 2, 5 }
    ],
    [
        { 1, 2 },
        { 2, 4, 5 },
        { 3, 5 }
    ],
    [
        { 3 },
        { 2, 4, 5 },
        { 1, 2, 5 }
    ],
    [
        { 2, 4 },
        { 1, 2, 5 },
        { 3, 5 }
    ],
    [
        { 2, 4, 5 },
        { 3, 5 },
        { 1, 2, 5 }
    ],
    [
        { 4 },
        { 1, 3 },
        { 2, 5 }
    ],
    [
        { 2 },
        { 1, 3 },
        { 4, 5 }
    ],
    [
        { 2 },
        { 4 },
        { 1, 3, 5 }
    ],
    [
        { 1, 3 },
        { 4, 5 },
        { 2, 5 }
    ],
    [
        { 2 },
        { 4, 5 },
        { 1, 3, 5 }
    ],
    [
        { 4 },
        { 1, 3, 5 },
        { 2, 5 }
    ],
    [
        { 4, 5 },
        { 2, 5 },
        { 1, 3, 5 }
    ],
    [
        { 3 },
        { 4 },
        { 1, 5 }
    ],
    [
        { 1 },
        { 4 },
        { 3, 5 }
    ],
    [
        { 1 },
        { 3 },
        { 4, 5 }
    ],
    [
        { 4 },
        { 3, 5 },
        { 1, 5 }
    ],
    [
        { 1 },
        { 3, 5 },
        { 4, 5 }
    ],
    [
        { 3 },
        { 4, 5 },
        { 1, 5 }
    ],
    [
        { 3, 5 },
        { 1, 5 },
        { 4, 5 }
    ],
    [
        { 4 },
        { 1, 2 },
        { 3, 5 }
    ],
    [
        { 3 },
        { 1, 2 },
        { 4, 5 }
    ],
    [
        { 3 },
        { 4 },
        { 1, 2, 5 }
    ],
    [
        { 1, 2 },
        { 4, 5 },
        { 3, 5 }
    ],
    [
        { 3 },
        { 4, 5 },
        { 1, 2, 5 }
    ],
    [
        { 4 },
        { 1, 2, 5 },
        { 3, 5 }
    ],
    [
        { 4, 5 },
        { 3, 5 },
        { 1, 2, 5 }
    ],
    [
        { 1 },
        { 4 },
        { 2, 5 }
    ],
    [
        { 2 },
        { 4 },
        { 1, 5 }
    ],
    [
        { 2 },
        { 1 },
        { 4, 5 }
    ],
    [
        { 4 },
        { 1, 5 },
        { 2, 5 }
    ],
    [
        { 2 },
        { 1, 5 },
        { 4, 5 }
    ],
    [
        { 1 },
        { 4, 5 },
        { 2, 5 }
    ],
    [
        { 1, 5 },
        { 2, 5 },
        { 4, 5 }
    ],
    [
        { 2, 4 },
        { 3, 4 },
        { 1, 3, 5 }
    ],
    [
        { 1, 3 },
        { 3, 4 },
        { 2, 4, 5 }
    ],
    [
        { 1, 3 },
        { 2, 4 },
        { 3, 4, 5 }
    ],
    [
        { 3, 4 },
        { 2, 4, 5 },
        { 1, 3, 5 }
    ],
    [
        { 1, 3 },
        { 2, 4, 5 },
        { 3, 4, 5 }
    ],
    [
        { 2, 4 },
        { 3, 4, 5 },
        { 1, 3, 5 }
    ],
    [
        { 2, 4, 5 },
        { 1, 3, 5 },
        { 3, 4, 5 }
    ],
    [
        { 3 },
        { 1, 4 },
        { 2, 5 }
    ],
    [
        { 2 },
        { 1, 4 },
        { 3, 5 }
    ],
    [
        { 2 },
        { 3 },
        { 1, 4, 5 }
    ],
    [
        { 1, 4 },
        { 3, 5 },
        { 2, 5 }
    ],
    [
        { 2 },
        { 3, 5 },
        { 1, 4, 5 }
    ],
    [
        { 3 },
        { 1, 4, 5 },
        { 2, 5 }
    ],
    [
        { 3, 5 },
        { 2, 5 },
        { 1, 4, 5 }
    ],
    [
        { 1, 3 },
        { 2, 3 },
        { 4, 5 }
    ],
    [
        { 4 },
        { 2, 3 },
        { 1, 3, 5 }
    ],
    [
        { 4 },
        { 1, 3 },
        { 2, 3, 5 }
    ],
    [
        { 2, 3 },
        { 1, 3, 5 },
        { 4, 5 }
    ],
    [
        { 4 },
        { 1, 3, 5 },
        { 2, 3, 5 }
    ],
    [
        { 1, 3 },
        { 2, 3, 5 },
        { 4, 5 }
    ],
    [
        { 1, 3, 5 },
        { 4, 5 },
        { 2, 3, 5 }
    ],
    [
        { 1, 3 },
        { 3, 4 },
        { 2, 5 }
    ],
    [
        { 2 },
        { 3, 4 },
        { 1, 3, 5 }
    ],
    [
        { 2 },
        { 1, 3 },
        { 3, 4, 5 }
    ],
    [
        { 3, 4 },
        { 1, 3, 5 },
        { 2, 5 }
    ],
    [
        { 2 },
        { 1, 3, 5 },
        { 3, 4, 5 }
    ],
    [
        { 1, 3 },
        { 3, 4, 5 },
        { 2, 5 }
    ],
    [
        { 1, 3, 5 },
        { 2, 5 },
        { 3, 4, 5 }
    ],
    [
        { 3 },
        { 2 },
        { 1, 5 }
    ],
    [
        { 1 },
        { 2 },
        { 3, 5 }
    ],
    [
        { 1 },
        { 3 },
        { 2, 5 }
    ],
    [
        { 2 },
        { 3, 5 },
        { 1, 5 }
    ],
    [
        { 1 },
        { 3, 5 },
        { 2, 5 }
    ],
    [
        { 3 },
        { 2, 5 },
        { 1, 5 }
    ],
    [
        { 3, 5 },
        { 1, 5 },
        { 2, 5 }
    ],
    [
        { 2, 3 },
        { 3, 4 },
        { 1, 5 }
    ],
    [
        { 1 },
        { 3, 4 },
        { 2, 3, 5 }
    ],
    [
        { 1 },
        { 2, 3 },
        { 3, 4, 5 }
    ],
    [
        { 3, 4 },
        { 2, 3, 5 },
        { 1, 5 }
    ],
    [
        { 1 },
        { 2, 3, 5 },
        { 3, 4, 5 }
    ],
    [
        { 2, 3 },
        { 3, 4, 5 },
        { 1, 5 }
    ],
    [
        { 2, 3, 5 },
        { 1, 5 },
        { 3, 4, 5 }
    ],
    [
        { 2 },
        { 3, 4 },
        { 1, 5 }
    ],
    [
        { 1 },
        { 3, 4 },
        { 2, 5 }
    ],
    [
        { 1 },
        { 2 },
        { 3, 4, 5 }
    ],
    [
        { 3, 4 },
        { 2, 5 },
        { 1, 5 }
    ],
    [
        { 1 },
        { 2, 5 },
        { 3, 4, 5 }
    ],
    [
        { 2 },
        { 3, 4, 5 },
        { 1, 5 }
    ],
    [
        { 2, 5 },
        { 1, 5 },
        { 3, 4, 5 }
    ],
    [
        { 4 },
        { 3 },
        { 2, 5 }
    ],
    [
        { 2 },
        { 3 },
        { 4, 5 }
    ],
    [
        { 2 },
        { 4 },
        { 3, 5 }
    ],
    [
        { 3 },
        { 4, 5 },
        { 2, 5 }
    ],
    [
        { 2 },
        { 4, 5 },
        { 3, 5 }
    ],
    [
        { 4 },
        { 3, 5 },
        { 2, 5 }
    ],
    [
        { 4, 5 },
        { 2, 5 },
        { 3, 5 }
    ],
    [
        { 4 },
        { 2, 3 },
        { 1, 5 }
    ],
    [
        { 1 },
        { 2, 3 },
        { 4, 5 }
    ],
    [
        { 1 },
        { 4 },
        { 2, 3, 5 }
    ],
    [
        { 2, 3 },
        { 4, 5 },
        { 1, 5 }
    ],
    [
        { 1 },
        { 4, 5 },
        { 2, 3, 5 }
    ],
    [
        { 4 },
        { 2, 3, 5 },
        { 1, 5 }
    ],
    [
        { 4, 5 },
        { 1, 5 },
        { 2, 3, 5 }
    ],
    [
        { 3 },
        { 2, 4 },
        { 1, 5 }
    ],
    [
        { 1 },
        { 2, 4 },
        { 3, 5 }
    ],
    [
        { 1 },
        { 3 },
        { 2, 4, 5 }
    ],
    [
        { 2, 4 },
        { 3, 5 },
        { 1, 5 }
    ],
    [
        { 1 },
        { 3, 5 },
        { 2, 4, 5 }
    ],
    [
        { 3 },
        { 2, 4, 5 },
        { 1, 5 }
    ],
    [
        { 3, 5 },
        { 1, 5 },
        { 2, 4, 5 }
    ],
    [
        { 1, 4 }
    ],
    [
        { 3 }
    ],
    [
        { 1, 3 }
    ],
    [
        { 1, 2, 4, 5 }
    ],
    [
        { 4, 5 }
    ],
    [
        { 1, 2, 3, 4 }
    ],
    [
        { 1, 2, 4 }
    ],
    [
        { 4 }
    ],
    [
        { 1, 5 }
    ],
    [
        { 2, 4, 5 }
    ],
    [
        { 1, 3, 4, 5 }
    ],
    [
        { 5 }
    ],
    [
        { 3, 4 }
    ],
    [
        { 1, 2, 3, 5 }
    ],
    [
        { 2, 3, 5 }
    ],
    [
        { 1, 2, 3 }
    ],
    [
        { 2, 3, 4 }
    ],
    [
        { 3, 4, 5 }
    ],
    [
        { 2 }
    ],
    [
        { 2, 3 }
    ],
    [
        { 1, 2, 3, 4, 5 }
    ],
    [
        { 1, 2 }
    ],
    [
        { 2, 4 }
    ],
    [
        { 1, 2, 5 }
    ],
    [
        { 1, 3, 5 }
    ],
    [
        { 1, 4, 5 }
    ],
    [
        { 2, 5 }
    ],
    [
        { 3, 5 }
    ],
    [
        { 2, 3, 4, 5 }
    ],
    [
        { 1 }
    ],
    [
        { 1, 3, 4 }
    ],
    [
        { 1, 2, 3, 4, 5 }
    ],
    [
        { 3 },
        { 2, 4 },
        { 1, 2 },
        { 5 }
    ],
    [
        { 2 },
        { 4 },
        { 1, 3 },
        { 5 }
    ],
    [
        { 1 },
        { 3 },
        { 4 },
        { 5 }
    ],
    [
        { 3 },
        { 4 },
        { 1, 2 },
        { 5 }
    ],
    [
        { 2 },
        { 1 },
        { 4 },
        { 5 }
    ],
    [
        { 1, 3 },
        { 2, 4 },
        { 3, 4 },
        { 5 }
    ],
    [
        { 2 },
        { 3 },
        { 1, 4 },
        { 5 }
    ],
    [
        { 4 },
        { 1, 3 },
        { 2, 3 },
        { 5 }
    ],
    [
        { 2 },
        { 1, 3 },
        { 3, 4 },
        { 5 }
    ],
    [
        { 1 },
        { 3 },
        { 2 },
        { 5 }
    ],
    [
        { 1 },
        { 2, 3 },
        { 3, 4 },
        { 5 }
    ],
    [
        { 1 },
        { 2 },
        { 3, 4 },
        { 5 }
    ],
    [
        { 2 },
        { 4 },
        { 3 },
        { 5 }
    ],
    [
        { 1 },
        { 4 },
        { 2, 3 },
        { 5 }
    ],
    [
        { 1 },
        { 3 },
        { 2, 4 },
        { 5 }
    ],
    [
        { 1 },
        { 2 },
        { 3 },
        { 4 }
    ],
    [
        { 2 },
        { 3 },
        { 4 },
        { 1, 5 }
    ],
    [
        { 1 },
        { 3 },
        { 4 },
        { 2, 5 }
    ],
    [
        { 1 },
        { 2 },
        { 4 },
        { 3, 5 }
    ],
    [
        { 1 },
        { 2 },
        { 3 },
        { 4, 5 }
    ],
    [
        { 3 },
        { 4 },
        { 2, 5 },
        { 1, 5 }
    ],
    [
        { 1 },
        { 4 },
        { 2, 5 },
        { 3, 5 }
    ],
    [
        { 2 },
        { 4 },
        { 3, 5 },
        { 1, 5 }
    ],
    [
        { 2 },
        { 3 },
        { 4, 5 },
        { 1, 5 }
    ],
    [
        { 1 },
        { 3 },
        { 4, 5 },
        { 2, 5 }
    ],
    [
        { 1 },
        { 2 },
        { 4, 5 },
        { 3, 5 }
    ],
    [
        { 2 },
        { 4, 5 },
        { 1, 5 },
        { 3, 5 }
    ],
    [
        { 1 },
        { 4, 5 },
        { 2, 5 },
        { 3, 5 }
    ],
    [
        { 4 },
        { 1, 5 },
        { 2, 5 },
        { 3, 5 }
    ],
    [
        { 3 },
        { 2, 5 },
        { 1, 5 },
        { 4, 5 }
    ],
    [
        { 4, 5 },
        { 2, 5 },
        { 1, 5 },
        { 3, 5 }
    ]
];

generatori5:=coppie5 cat triple5;


limite:=5000;
//limite:=10000;

mmaxq:=20;
qu:=q;
m:=7;


K<x>:=PolynomialRing(ComplexField());


minl0:=D*N;//X_0


minl3:=1;//X_ns

lev0:=minl0;
lev3:=minl3;

while GCD(lev3,lev0) gt 1 do 
lev3:=lev3+1;
end while;


l0:=lev0;
l3:=lev3;

livello:=l0*(l3)^2;
if livello le limite then 
    while GCD(qu,livello) gt 1 do
    qu:=NextPrime(qu);
    end while;

DIVILEV:=Divisors(lev0*lev3);
diviLEV:=#DIVILEV;
priLEV:=PrimeDivisors(lev0*lev3);
valLEV:=#priLEV;
VLEV:=[]; //valutazione primi del livello

    for i in [1..valLEV] do
    p:=priLEV[i];
    j:=0;
    b:=0;
        while b eq 0 do //
        j:=j+1;
        a,b:=Quotrem(lev0*lev3,p^j);
        end while; //    
    VLEV[i]:=j-1;
    end for;//i 


DIVILEV0:=DIVILEV;
diviLEV0:=#DIVILEV;
priLEV0:=priLEV;
valLEV0:=#priLEV0;
VLEV0:=VLEV; //valutazione primi di l0




DIVILEV3:=Divisors(lev3);
diviLEV3:=#DIVILEV3;
priLEV3:=PrimeDivisors(lev3);
valLEV3:=#priLEV3;
VLEV3:=[]; //valutazione primi di l3

    for i in [1..valLEV3] do
    p:=priLEV3[i];
    j:=0;
    b:=0;
        while b eq 0 do //
        j:=j+1;
        a,b:=Quotrem(lev3,p^j);
        end while; //    
    VLEV3[i]:=j-1;
    end for;//i 


//FINE INIZIALIZZAZIONE


ins_scart:={};
    if valLEV lt 5 then
    for i in [1..5-valLEV] do
    b:=valLEV +i;
    ins_scart:=ins_scart join {b};
    end for;
    end if;

a:=generatori5;

//a:=prova;
 for v in a do 
 l:=#v;
 bool:=0;
  for i in [1..l] do
  c:= v[i] meet ins_scart;
     if not IsEmpty(c) then
     bool:=1;
     end if; 
  end for; //i
 if bool eq 1 then
 Exclude(~a,v);
 end if;
 end for; //v




a:=a cat [[]];



quozienti:=a;


//UN ESEMPIO CON UN INSIEME DI GENERATORI DATO ALL'INIZIO:
//quozienti:=prova;   

// FINE CALCOLO GENERATORI


DIVI:=Divisors(livello);
divi:=#DIVI;
pri:=PrimeDivisors(livello);
val:=#pri;

V1:=[]; //valutazione primi di l0 nell'ordine di lev0*lev3
V2:=[];
    for i in [1..val] do
    p:=pri[i];
    j:=0;
    b:=0;
        while b eq 0 do // 9 b
        j:=j+1;
        a,b:=Quotrem(l0,p^j);
        end while;  // 9 b
    V1[i]:=j-1;
    end for;

    for i in [1..val] do
    p:=pri[i];
    j:=0;
    b:=0;
        while b eq 0 do // 9 b
        j:=j+1;
        a,b:=Quotrem(l3,p^j);
        end while;  // 9 b
    V2[i]:=j-1;
    end for;


     p3:=2;
     k3:=0;
    for j in [1..25] do //E' NECESSARIO CHE qu<100!!!
        if p3 eq qu then
        k3:=j;
        end if;
        p3:=NextPrime(p3);
    end for; //j

for generatori in quozienti do 
wm:=[];
for primi in generatori do
molt:=1;
    for p in primi do
    molt:=priLEV[p]*molt;
    end for;
Append(~wm,molt);
end for;

        g:=0;
        ab:=[];

for d0:=1 to diviLEV do // V
for d3:=1 to diviLEV3 do // VII
//

n0:=DIVILEV[d0];

if IsDivisibleBy(n0,D) then

n31:=DIVILEV3[d3];
n3:=n31^2;
n:=n0*n3;
//printf"\n     d0=%o, d3=%o\n",n0,n3;

divin:=NumberOfDivisors(n);
DIVIn:=Divisors(n);
prin:=PrimeDivisors(n);
valn:=#prin;

divin0:=NumberOfDivisors(n0);
DIVIn0:=Divisors(n0);
prin0:=PrimeDivisors(n0);
valn0:=#prin0;

divin3:=NumberOfDivisors(n3);
DIVIn3:=Divisors(n3);
prin3:=PrimeDivisors(n3);
valn3:=#prin3;


PAR:=[];
W:=[]; //valutazione primi di n
        for i in [1..valLEV] do //CALCOLO W e PAR
        p:=priLEV[i];   
        j:=0;
        b:=0;
            while b eq 0 do // 13 b
            j:=j+1;
            a,b:=Quotrem(n,p^j);
            end while;  // 13 b
        W[i]:=j-1;
    if IsDivisibleBy(lev3,p) then
        W[i]:=Floor((j-1)/2);
    end if;
        a,b:=Quotrem(VLEV[i]-W[i],2);
        PAR[i]:=b;
        end for; //i

PAR0:=[];
W0:=[]; //valutazione primi di n0
        for i in [1..valLEV0] do //CALCOLO W e PAR
        p:=priLEV0[i];   
        j:=0;
        b:=0;
            while b eq 0 do // 13 b
            j:=j+1;
            a,b:=Quotrem(n0,p^j);
            end while;  // 13 b
        W0[i]:=j-1;
        a,b:=Quotrem(VLEV0[i]-W0[i],2);
        PAR0[i]:=b;
        end for; //i

PAR3:=[];
W3:=[]; //valutazione primi di ns
        for i in [1..valLEV3] do //CALCOLO W e PAR
        p:=priLEV3[i];
        j:=0;
        b:=0;
            while b eq 0 do // 14 b
            j:=j+1;
            a,b:=Quotrem(n3,p^j);
            end while;  // 14 b
        W3[i]:=Floor((j-1)/2);
        a,b:=Quotrem(VLEV3[i]-W3[i],2);
        PAR3[i]:=b;
        end for; //i

dim1:=#dataByLevel[n];


        nozeri:={};
    for J in generatori do // trovo i non zeri
    nozeri:=nozeri join J;
    end for;
zeri:={};
    for i in [1..valLEV] do
        if not i in nozeri then
        zeri:=zeri join {i};
        end if;
    end for; //i

//printf"zeri2";zeri2;


//printf "A0 n0=%o, zeri=%o, nozeri=%o\n",n0,zeri,nozeri;


              for cont:=1 to dim1 do // X

                Hf:=1;
                Hf1:=1;
                Hf2:=1;

            Hf00:=[];
            Hf0p:=[];
        Hf0m:=[];
        autoVal:=[];

    for i in [1..valLEV] do //calcolo Hf0's
        dif:=VLEV[i];
                p1:=priLEV[i];
        k1:=0;
            for j in [1..valn] do // k1<valn1
                    p2:=prin[j];
            if p2 eq p1 then k1:=j;
            end if;
            end for; //j
if k1 eq 0 then // p>2 se n=15
    autoV:=1;//arbitrario?????????????????????????
    autoVal[i]:=autoV;  
end if;
if IsDivisibleBy(lev0,p1) then
if k1 ne 0 then 
    autoV:=dataByLevel[n,cont,6][k1];
    autoVal[i]:=autoV;
    dif:=dif-W[i];
end if; //k1
    //printf"\n n0=%o, dim1=%o, cont=%o,autoV=%o,k1=%o ",n0,dim1,cont,autoV1,k1;
    parte2:=Floor( (1+(-1)^dif)/2);
    zp:=Floor( (dif+1+parte2*autoV)/2);   //  non Ã¨ mai dispari!
    Append(~Hf00,dif+1);
    Append(~Hf0p,zp);
    Append(~Hf0m,dif+1-zp);
end if;

end for; //i in [1..valLEV]
//printf "\n Hfp=%o\n", Hf3p;
    H1:=1;
    for t in zeri do 
    p1:=priLEV[t];
    if IsDivisibleBy(lev0,p1) then
    H1:=H1*Hf00[t];
    end if;
//if n in selezione then printf "\n p=%o, Hf00[%o]=%o\n", priLEV[t],t,Hf00[t]; end if;
    end for;

//CALCOLO Hf
//printf "\n A1 H1=%o\n", H1;

    sum:=0;

    vettore:=Subsets(nozeri);//nozeri???

    for u in vettore do //sottoinsiemi di J con numero pari di intersezioni
    check:=1;
    for J in generatori do //II rip
    if not IsEven(#(J meet u)) then
    check:=0;
    end if;
    end for;//J

    if check eq 0 then
    Exclude(~vettore,u);
    end if;

    end for;//u

  for u in vettore do
//if n in selezione then printf "A2 u=%o\n",u; end if;

    H:=H1;
        for t in nozeri do //calcolo m_f
    p1:=priLEV[t];

    if IsEven(#PrimeDivisors(GreatestCommonDivisor(p1,D)) ) then //??????????????????????????????????????
    segno:=1;
    else 
    segno:=-1;
    end if;


        if t in u then
if segno eq 1 then
        H:=H*Hf0m[t];
else
        H:=H*Hf0p[t];
end if;
//if n in selezione then printf "\n 3 t in u H=H*%o\n", Hf0m[t]; end if;
        else
if segno eq 1 then
        H:=H*Hf0p[t];
else
        H:=H*Hf0m[t];
end if;
//if n in selezione then printf "\n 3 t not in u H=H*%o\n", Hf0p[t]; end if;
        end if;//t in u opp um
        end for;//t in nozeri
// if n in selezione then printf "\n 3 H=%o\n", H; end if;
        sum:=sum+H; //invarianti rispetto a J
//if n in selezione then printf "4 u=%o, sum=%o\n", u,sum; end if;
    end for;//u
Hf:=sum*Hf; //invarianti rispetto a tutte le J
//if n in selezione then printf "4.5 Hf=%o, sum=%o\n",Hf,sum; end if;


//CONTROLLO 0 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
//printf "5 Hf0m=%o, Hf0p=%o, Hf00=%o, Hf1=%o, autoV=%o\n",Hf0m,Hf0p,Hf00,Hf1,autov;


     w:=dataByLevel[n,cont,3];

//CONTROLLO n.1 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
//printf "\n                      n=%o, Hf1=%o, w=%o \\",n,Hf1,w;

//if n in selezione then
//if Hf gt 0 then printf"6 n=%o, cont=%o, Hf=%o, w=%o, sum=%o,\n Hf00=%o, Hf0p=%o, Hf0m=%o, autoVal=%o\n", n, cont, Hf, w, sum, Hf00, Hf0p, Hf0m, autoVal; end if;
//end if;



    for cont2 in [1..Hf] do //XI *Hf0*Hf1*Hf2*1???????
        for c in [1..w] do //XII

        x1:=dataByLevel[n,cont,7,c][k3];
        Append(~ab,x1);
    g:=g+1;//AJ
          end for;// XII c

//CONTROLLO n.2 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
//printf "7 l0=%o & g=%o , sum=%o, ab=%o \n ",l0,g,sum, ab[g];
    end for; // XI cont2;


                end for; // X cont
end if; //D|n0
end for;// VII d3
end for;// V d0


//printf "\n X(%o, %o, %o)& g=%o\\",l0,l1,l2,g;
//ab;
t:=[];

for i:=1 to #ab do
d:=Roots(x^2+qu-ab[i]*x,ComplexField());
Append(~t,d[1][1]);
Append(~t,d[2][1]);
end for; //i

v:=[];

 for k:=1 to m do        
 e:=0;
     for i:=1 to 1*#ab do
     e:=e+t[2*i]^k+t[2*i-1]^k;
     end for; //i

 Append(~v,qu^k+1-Floor(Real(e+0.1)));
 end for; //k


printf "\n X_0^%o (%o)/W(%o) g=%o",D,N, wm,g;

printf "\n %o & %o & %o & %o & %o & %o & %o & %o \\\\ \n", qu,  v[1], v[2], v[3], v[4], v[5], v[6], v[7];

//
end for;// II generatori
end if;//livello

return "done";

end function;


shiALpoints:=function(q,i,D,N,prova) 
g,v:=shiAL(q,D,N,prova);
return v[i];
end function;

shiALgen:=function(D,N,prova) 
q:=2;
while IsDivisibleBy(D*N,q) do
q:=NextPrime(q);
end while;
g,v:=shiAL(q,D,N,prova);
return g;
end function;

shiALquot:=function(q,i,D,N,prova)
limite:=D*N;
PRI:=Factorization(limite);
pri:=#PRI;
d:=[];
if #prova eq 0 then
g,v:=shiAL(q,D,N,[{}]);
else
for m in prova do
A:={};
    for j in [1..pri] do
    if IsDivisibleBy(m,PRI[j][1]) then
    A:=A join {j};
    end if;
    end for;//j
Append(~d,A);
end for; //m
g,v:=shiAL(q,D,N,d);
end if;
return v[i];
end function;

shiALquot_gen:=function(D,N,prova)
q:=2;
limite:=D*N;
while IsDivisibleBy(limite,q) do
q:=NextPrime(q);
end while;
PRI:=Factorization(limite);
pri:=#PRI;
d:=[];
if #prova eq 0 then
g,v:=shiAL(q,D,N,[{}]);
else
for m in prova do
A:={};
    for j in [1..pri] do
    if IsDivisibleBy(m,PRI[j][1]) then
    A:=A join {j};
    end if;
    end for;//j
Append(~d,A);
end for; //m
g,v:=shiAL(q,D,N,d);
end if;
return g;
end function;
